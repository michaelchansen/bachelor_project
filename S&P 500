import quandl
quandl.ApiConfig.api_key = "AVMYvSwZKJ3Yjg-kUWzT"
import numpy as np
import pandas as pd

prices = quandl.get_table('SHARADAR/SEP', ticker=['AAPL','MMM','AOS','ABT','ABBV','ABMD','ACN','ATVI','ADBE','AAP','AMD','AES','AFL','A','APD','AKAM','ALK','ARE','ALB','ALXN','ALGN','ALLE','LNT','ALL','GOOGL','GOOG','MO','AMZN','AMCR','AEE','AAL','AEP','AXP','AIG','AMT','AWK','AMP','ABC','AME','AMGN','APH','ADI','ANSS','ANTM','AON','APA','AAPL','AMAT','APTV'
,'ADM'
,'ANET'
,'AJG'
,'AIZ'
,'T'
,'ATO'
,'ADSK'
,'ADP'
,'AZO'
,'AVB'
,'AVY'
,'BKR'
,'BLL'
,'BAC'
,'BAX'
,'BDX'
,'BRK.B'
,'BBY'
,'BIO'
,'BIIB'
,'BLK'
,'BA'
,'BKNG'
,'BWA'
,'BXP'
,'BSX'
,'BMY'
,'AVGO'
,'BR'
,'BF.B'
,'CHRW'
,'COG'
,'CDNS'
,'CPB'
,'COF'
,'CAH'
,'KMX'
,'CCL'
,'CARR'
,'CTLT'
,'CAT'
,'CBOE'
,'CBRE'
,'CDW'
,'CE'
,'CNC'
,'CNP'
,'CERN'
,'CF'
,'SCHW'
,'CHTR'
,'CVX'
,'CMG'
,'CB'
,'CHD'
,'CI'
,'CINF'
,'CTAS'
,'CSCO'
,'C'
,'CFG'
,'CTXS'
,'CME'
,'CMS'
,'KO'
,'CTSH'
,'CL'
,'CMCSA'
,'CMA'
,'CAG'
,'COP'
,'ED'
,'STZ'
,'CPRT'
,'GLW'
,'CTVA'
,'COST'
,'CCI'
,'CSX'
,'CMI'
,'CVS'
,'DHI'
,'DHR'
,'DRI'
,'DVA'
,'DE'
,'DAL'
,'XRAY'
,'DVN'
,'DXCM'
,'FANG'
,'DLR'
,'DFS'
,'DISCA'
,'DISCK'
,'DISH'
,'DG'
,'DLTR'
,'D'
,'DPZ'
,'DOV'
,'DOW'
,'DTE'
,'DUK'
,'DRE'
,'DD'
,'DXC'
,'EMN'
,'ETN'
,'EBAY'
,'ECL'
,'EIX'
,'EW'
,'EA'
,'EMR'
,'ENPH'
,'ETR'
,'EOG'
,'EFX'
,'EQIX'
,'EQR'
,'ESS'
,'EL'
,'ETSY'
,'RE'
,'EVRG'
,'ES'
,'EXC'
,'EXPE'
,'EXPD'
,'EXR'
,'XOM'
,'FFIV'
,'FB'
,'FAST'
,'FRT'
,'FDX'
,'FIS'
,'FITB'
,'FRC'
,'FE'
,'FISV'
,'FLT'
,'FLIR'
,'FLS'
,'FMC'
,'F'
,'FTNT'
,'FTV'
,'FBHS'
,'FOXA'
,'FOX'
,'BEN'
,'FCX'
,'GPS'
,'GRMN'
,'IT'
,'GD'
,'GE'
,'GIS'
,'GM'
,'GPC'
,'GILD'
,'GPN'
,'GL'
,'GS'
,'GWW'
,'HAL'
,'HBI'
,'HIG'
,'HAS'
,'HCA'
,'PEAK'
,'HSIC'
,'HES'
,'HPE'
,'HLT'
,'HFC'
,'HOLX'
,'HD'
,'HON'
,'HRL'
,'HST'
,'HWM'
,'HPQ'
,'HUM'
,'HBAN'
,'HII'
,'IEX'
,'IDXX'
,'INFO'
,'ITW'
,'ILMN'
,'INCY'
,'IR'
,'INTC'
,'ICE'
,'IBM'
,'IFF'
,'IP'
,'IPG'
,'INTU'
,'ISRG'
,'IVZ'
,'IPGP'
,'IQV'
,'IRM'
,'JBHT'
,'JKHY'
,'J'
,'SJM'
,'JNJ'
,'JCI'
,'JPM'
,'JNPR'
,'KSU'
,'K'
,'KEY'
,'KEYS'
,'KMB'
,'KIM'
,'KMI'
,'KLAC'
,'KHC'
,'KR'
,'LB'
,'LHX'
,'LH'
,'LRCX'
,'LW'
,'LVS'
,'LEG'
,'LDOS'
,'LEN'
,'LLY'
,'LNC'
,'LIN'
,'LYV'
,'LKQ'
,'LMT'
,'L'
,'LOW'
,'LUMN'
,'LYB'
,'MTB'
,'MRO'
,'MPC'
,'MKTX'
,'MAR'
,'MMC'
,'MLM'
,'MAS'
,'MA'
,'MXIM'
,'MKC'
,'MCD'
,'MCK'
,'MDT'
,'MRK'
,'MET'
,'MTD'
,'MGM'
,'MCHP'
,'MU'
,'MSFT'
,'MAA'
,'MHK'
,'TAP'
,'MDLZ'
,'MNST'
,'MCO'
,'MS'
,'MSI'
,'MSCI'
,'NDAQ'
,'NTAP'
,'NFLX'
,'NWL'
,'NEM'
,'NWSA'
,'NWS'
,'NEE'
,'NLSN'
,'NKE'
,'NI'
,'NSC'
,'NTRS'
,'NOC'
,'NLOK'
,'NCLH'
,'NOV'
,'NRG'
,'NUE'
,'NVDA'
,'NVR'
,'ORLY'
,'OXY'
,'ODFL'
,'OMC'
,'OKE'
,'ORCL'
,'OTIS'
,'PCAR'
,'PKG'
,'PH'
,'PH'
,'PAYC'
,'PYPL'
,'PNR'
,'PBCT'
,'PEP'
,'PKI'
,'PRGO'
,'PFE'
,'PM'
,'PSX'
,'PNW'
,'PXD'
,'PNC'
,'POOL'
,'PPG'
,'PPL'
,'PFG'
,'PG'
,'PGR'
,'PLD'
,'PRU'
,'PEG'
,'PSA'
,'PHM'
,'PVH'
,'QRVO'
,'QCOM'
,'PWR'
,'DGX'
,'RL'
,'RJF'
,'RTX'
,'O'
,'REG'
,'REGN'
,'RF'
,'RSG'
,'RMD'
,'RHI'
,'ROK'
,'ROL'
,'ROP'
,'ROST'
,'RCL'
,'SPGI'
,'CRM'
,'SBAC'
,'SLB'
,'STX'
,'SEE'
,'SRE'
,'NOW'
,'SHW'
,'SPG'
,'SWKS'
,'SLG'
,'SNA'
,'SO'
,'LUV'
,'SWK'
,'SBUX'
,'STT'
,'STE'
,'SYK'
,'SIVB'
,'SYF'
,'SNPS'
,'SYY'
,'TMUS'
,'TROW'
,'TTWO'
,'TPR'
,'TGT'
,'TEL'
,'FTI'
,'TDY'
,'TFX'
,'TER'
,'TSLA'
,'TXN'
,'TXT'
,'BK'
,'CLX'
,'COO'
,'HSY'
,'MOS'
,'TRV'
,'DIS'
,'TMO'
,'TJX'
,'TSCO'
,'TT'
,'TDG'
,'TRMB'
,'TFC'
,'TWTR'
,'TYL'
,'TSN'
,'USB'
,'UDR'
,'ULTA'
,'UAA'
,'UA'
,'UNP'
,'UAL'
,'UPS'
,'URI'
,'UNH'
,'UHS'
,'UNM'
,'VLO'
,'VAR'
,'VTR'
,'VRSN'
,'VRSK'
,'VZ'
,'VRTX'
,'VFC'
,'VIAC'
,'VTRS'
,'V'
,'VNT'
,'VNO'
,'VMC'
,'WRB'
,'WBA'
,'WMT'
,'WM'
,'WAT'
,'WEC'
,'WFC'
,'WELL'
,'WST'
,'WDC'
,'WU'
,'WAB'
,'WRK'
,'WY'
,'WHR'
,'WMB'
,'WLTW'
,'WYNN'
,'XEL'
,'XRX'
,'XLNX'
,'XYL'
,'YUM'
,'ZBRA'
,'ZBH'
,'ZION'
,'ZTS'], date={'gte':'2015-02-01', 'lte':'2021-02-01'}, paginate=True)

pivoted = prices.pivot(index='date', columns='ticker', values='close')
pivoted.head()

cov_matrix = pivoted.pct_change().apply(lambda x: np.log(1+x)).cov()
cov_matrix

e_r = pivoted.resample('Y').last().pct_change().mean()
e_r

sd = pivoted.pct_change().apply(lambda x: np.log(1+x)).std().apply(lambda x: x*np.sqrt(250))
sd

assets = pd.concat([e_r, sd], axis=1)
assets.columns = ['Returns', 'Volatility']
assets

p_ret = []
p_vol = []
p_weights = []

num_assets = len(pivoted.columns)
num_portfolios = 10000

for portfolio in range(num_portfolios):
    weights = np.random.random(num_assets)
    weights = weights/np.sum(weights)
    p_weights.append(weights)
    returns = np.dot(weights, e_r)
    p_ret.append(returns)
    var = cov_matrix.mul(weights, axis=0).mul(weights, axis=1).sum().sum()
    sd = np.sqrt(var)
    ann_sd = sd*np.sqrt(250)
    p_vol.append(ann_sd)
    
 data = {'Returns':p_ret, 'Volatility':p_vol}
 
 for counter, symbol in enumerate(pivoted.columns.tolist()):
    data[symbol+' weight'] = [w[counter] for w in p_weights]
    
 portfolios  = pd.DataFrame(data)
portfolios.head()

portfolios.plot.scatter(x='Volatility', y='Returns', grid=True)

portfolios[portfolios['Volatility']==portfolios['Volatility'].min()]

min_var_port = portfolios.iloc[portfolios['Volatility'].idxmin()]
min_var_port

import matplotlib.pyplot as plt
plt.subplots(figsize=(20,10))
plt.scatter(portfolios['Volatility'], portfolios['Returns'])
plt.scatter(min_var_port[1], min_var_port[0], color='y')

rf = 0.0003

((portfolios['Returns']-rf)/portfolios['Volatility']).idxmax()

optimal_risky_port = portfolios.iloc[((portfolios['Returns']-rf)/portfolios['Volatility']).idxmax()]
optimal_risky_port

plt.subplots(figsize=(20,10))
plt.scatter(portfolios['Volatility'], portfolios['Returns'])
plt.scatter(min_var_port[1], min_var_port[0], color='y')
plt.scatter(optimal_risky_port[1], optimal_risky_port[0], color='m')

cal_x = []
cal_y = []
utility = []
a = 5

for er in np.linspace(rf, max(p_ret), 20):
    sd = (er - rf)/((optimal_risky_port[0]-rf)/optimal_risky_port[1])
    u = er - .5*a*(sd**2)
    cal_x.append(sd)
    cal_y.append(er)
    utility.append(u)
    
 data2 = {'utility':utility, 'cal_y':cal_y, 'cal_x':cal_x}
cal = pd.DataFrame(data2)
cal.head()

plt.subplots(figsize=(20,10))
plt.scatter(portfolios['Volatility'], portfolios['Returns'])
plt.scatter(min_var_port[1], min_var_port[0], color='y')
plt.scatter(optimal_risky_port[1], optimal_risky_port[0], color='m')
plt.plot(cal_x, cal_y, color='r')

cal['utility'].idxmax()

investors_port = cal.iloc[cal['utility'].idxmax()]
investors_port

plt.subplots(figsize=(20,10))
plt.scatter(portfolios['Volatility'], portfolios['Returns'])
plt.scatter(min_var_port[1], min_var_port[0], color='y')
plt.scatter(optimal_risky_port[1], optimal_risky_port[0], color='m')
plt.plot(cal_x, cal_y, color='r')
plt.plot(investors_port[2], investors_port[1], 'o', color='b')
